"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuth = void 0;
require("isomorphic-fetch");
const config_1 = require("../../config");
const isNil_1 = __importDefault(require("lodash/isNil"));
const isString_1 = __importDefault(require("lodash/isString"));
const isNumber_1 = __importDefault(require("lodash/isNumber"));
class OAuth {
    constructor(cookies) {
        this.cookies = cookies;
        this.tokenKey = `${(0, config_1.config)().wpUrl}-rt`;
    }
    getRefreshToken() {
        return this.cookies.getCookie(this.tokenKey);
    }
    setRefreshToken(token, expires) {
        if (!(0, isString_1.default)(token) || token.length === 0) {
            this.cookies.removeCookie(this.tokenKey);
        }
        let maxAge = 2592000;
        let expiresIn;
        if ((0, isNumber_1.default)(expires)) {
            expiresIn = new Date(expires * 1000);
            maxAge = undefined;
        }
        this.cookies.setCookie(this.tokenKey, token, {
            expires: expiresIn,
            maxAge,
            path: '/',
            sameSite: 'strict',
            secure: true,
            httpOnly: true,
        });
    }
    async fetch(code) {
        const { wpUrl, apiClientSecret } = (0, config_1.config)();
        if (!apiClientSecret) {
            throw new Error('The apiClientSecret must be specified to use the auth middleware');
        }
        const response = await fetch(`${wpUrl}/wp-json/wpac/v1/authorize`, {
            headers: {
                'Content-Type': 'application/json',
                'x-wpe-headless-secret': apiClientSecret,
            },
            method: 'POST',
            body: JSON.stringify({
                code,
                refreshToken: this.getRefreshToken(),
            }),
        });
        const result = await response.json();
        if (!response.ok) {
            return {
                error: true,
                response,
                result,
            };
        }
        return result;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    isOAuthTokens(value) {
        const castedValue = value;
        return (!(0, isNil_1.default)(castedValue) &&
            (0, isString_1.default)(castedValue.accessToken) &&
            (0, isString_1.default)(castedValue.refreshToken) &&
            (0, isNumber_1.default)(castedValue.accessTokenExpiration) &&
            (0, isNumber_1.default)(castedValue.refreshTokenExpiration));
    }
}
exports.OAuth = OAuth;
