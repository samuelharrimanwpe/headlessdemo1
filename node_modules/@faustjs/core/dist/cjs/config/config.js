"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGqlUrl = exports.config = exports.normalizeConfig = exports.LOGOUT_ENDPOINT_PARTIAL_PATH = exports.TOKEN_ENDPOINT_PARTIAL_PATH = void 0;
const isString_1 = __importDefault(require("lodash/isString"));
const defaults_1 = __importDefault(require("lodash/defaults"));
const trimEnd_1 = __importDefault(require("lodash/trimEnd"));
const extend_1 = __importDefault(require("lodash/extend"));
const isObject_1 = __importDefault(require("lodash/isObject"));
const isNil_1 = __importDefault(require("lodash/isNil"));
const trim_1 = __importDefault(require("lodash/trim"));
const utils_1 = require("../utils");
exports.TOKEN_ENDPOINT_PARTIAL_PATH = 'auth/token';
exports.LOGOUT_ENDPOINT_PARTIAL_PATH = 'auth/logout';
/* eslint-enable @typescript-eslint/ban-types */
let faustConfig = {
    wpUrl: '/',
};
let configSet = false;
/**
 * Takes a Config and ensures the properties that need to be normalized
 * (e.g. URL slashes trimmed, etc) are handled.
 *
 * @export
 * @param {Config} config
 * @returns {Config}
 */
function normalizeConfig(config) {
    const cfg = (0, defaults_1.default)({}, config, {
        apiBasePath: '/api/faust',
        authType: 'redirect',
        loginPagePath: '/login',
        disableLogging: false,
    });
    Object.keys(cfg).forEach((key) => {
        const keyValue = key;
        const value = cfg[keyValue];
        if ((0, isString_1.default)(value)) {
            cfg[keyValue] = value.trim();
        }
    });
    let { wpUrl, apiBasePath } = cfg;
    wpUrl = (0, trimEnd_1.default)(wpUrl, '/');
    apiBasePath = `/${(0, trim_1.default)(apiBasePath, '/')}`;
    return (0, extend_1.default)(cfg, {
        wpUrl,
        apiBasePath,
    });
}
exports.normalizeConfig = normalizeConfig;
/**
 * A setter/getter for the Config
 *
 * @export
 * @param {Config} [cfg]
 * @returns {Config}
 */
function config(cfg) {
    if (!configSet && !(0, isObject_1.default)(cfg)) {
        throw new Error('You must set your faustjs configuration at the highest level in your application. `config` was called with no arguments prior to setting the configuration.');
    }
    if (!(0, isObject_1.default)(cfg)) {
        return faustConfig;
    }
    configSet = true;
    faustConfig = normalizeConfig(cfg);
    return faustConfig;
}
exports.config = config;
/**
 * Get the full URL to the GraphQL endpoint
 *
 * @export
 * @returns
 */
function getGqlUrl() {
    const { wpUrl, gqlUrl } = config();
    if ((0, isNil_1.default)(gqlUrl) || !(0, isString_1.default)(gqlUrl)) {
        return `${wpUrl}/graphql`;
    }
    if ((0, utils_1.isValidUrl)(gqlUrl)) {
        return (0, trimEnd_1.default)(gqlUrl, '/');
    }
    else {
        return `${wpUrl}/${(0, trim_1.default)(gqlUrl, '/')}`;
    }
}
exports.getGqlUrl = getGqlUrl;
