import 'isomorphic-fetch';
import { config } from '../../config';
import isNil from 'lodash/isNil';
import isString from 'lodash/isString';
import isNumber from 'lodash/isNumber';
export class OAuth {
    cookies;
    tokenKey;
    constructor(cookies) {
        this.cookies = cookies;
        this.tokenKey = `${config().wpUrl}-rt`;
    }
    getRefreshToken() {
        return this.cookies.getCookie(this.tokenKey);
    }
    setRefreshToken(token, expires) {
        if (!isString(token) || token.length === 0) {
            this.cookies.removeCookie(this.tokenKey);
        }
        let maxAge = 2592000;
        let expiresIn;
        if (isNumber(expires)) {
            expiresIn = new Date(expires * 1000);
            maxAge = undefined;
        }
        this.cookies.setCookie(this.tokenKey, token, {
            expires: expiresIn,
            maxAge,
            path: '/',
            sameSite: 'strict',
            secure: true,
            httpOnly: true,
        });
    }
    async fetch(code) {
        const { wpUrl, apiClientSecret } = config();
        if (!apiClientSecret) {
            throw new Error('The apiClientSecret must be specified to use the auth middleware');
        }
        const response = await fetch(`${wpUrl}/wp-json/wpac/v1/authorize`, {
            headers: {
                'Content-Type': 'application/json',
                'x-wpe-headless-secret': apiClientSecret,
            },
            method: 'POST',
            body: JSON.stringify({
                code,
                refreshToken: this.getRefreshToken(),
            }),
        });
        const result = await response.json();
        if (!response.ok) {
            return {
                error: true,
                response,
                result,
            };
        }
        return result;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    isOAuthTokens(value) {
        const castedValue = value;
        return (!isNil(castedValue) &&
            isString(castedValue.accessToken) &&
            isString(castedValue.refreshToken) &&
            isNumber(castedValue.accessTokenExpiration) &&
            isNumber(castedValue.refreshTokenExpiration));
    }
}
