import isString from 'lodash/isString';
import defaults from 'lodash/defaults';
import trimEnd from 'lodash/trimEnd';
import extend from 'lodash/extend';
import isObject from 'lodash/isObject';
import isNil from 'lodash/isNil';
import trim from 'lodash/trim';
import { isValidUrl } from '../utils';
export const TOKEN_ENDPOINT_PARTIAL_PATH = 'auth/token';
export const LOGOUT_ENDPOINT_PARTIAL_PATH = 'auth/logout';
/* eslint-enable @typescript-eslint/ban-types */
let faustConfig = {
    wpUrl: '/',
};
let configSet = false;
/**
 * Takes a Config and ensures the properties that need to be normalized
 * (e.g. URL slashes trimmed, etc) are handled.
 *
 * @export
 * @param {Config} config
 * @returns {Config}
 */
export function normalizeConfig(config) {
    const cfg = defaults({}, config, {
        apiBasePath: '/api/faust',
        authType: 'redirect',
        loginPagePath: '/login',
        disableLogging: false,
    });
    Object.keys(cfg).forEach((key) => {
        const keyValue = key;
        const value = cfg[keyValue];
        if (isString(value)) {
            cfg[keyValue] = value.trim();
        }
    });
    let { wpUrl, apiBasePath } = cfg;
    wpUrl = trimEnd(wpUrl, '/');
    apiBasePath = `/${trim(apiBasePath, '/')}`;
    return extend(cfg, {
        wpUrl,
        apiBasePath,
    });
}
/**
 * A setter/getter for the Config
 *
 * @export
 * @param {Config} [cfg]
 * @returns {Config}
 */
export function config(cfg) {
    if (!configSet && !isObject(cfg)) {
        throw new Error('You must set your faustjs configuration at the highest level in your application. `config` was called with no arguments prior to setting the configuration.');
    }
    if (!isObject(cfg)) {
        return faustConfig;
    }
    configSet = true;
    faustConfig = normalizeConfig(cfg);
    return faustConfig;
}
/**
 * Get the full URL to the GraphQL endpoint
 *
 * @export
 * @returns
 */
export function getGqlUrl() {
    const { wpUrl, gqlUrl } = config();
    if (isNil(gqlUrl) || !isString(gqlUrl)) {
        return `${wpUrl}/graphql`;
    }
    if (isValidUrl(gqlUrl)) {
        return trimEnd(gqlUrl, '/');
    }
    else {
        return `${wpUrl}/${trim(gqlUrl, '/')}`;
    }
}
