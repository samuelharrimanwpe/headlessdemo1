import { create as createAuthHook } from './useAuth';
import { create as createLazyQueryHook } from './useLazyQuery';
import { create as createMutationHook } from './useMutation';
import { create as createPaginatedQueryHook } from './usePaginatedQuery';
import { create as createQueryHook } from './useQuery';
import { create as createSubscriptionHook } from './useSubscription';
import { create as createTransactionQueryHook } from './useTransactionQuery';
import { create as createHydrateCacheHook } from './useHydrateCache';
import { create as createCategoryHook } from './useCategory';
import { create as createPostsHook } from './usePosts';
import { create as createPostHook } from './usePost';
import { create as createPageHook } from './usePage';
import { create as createPreviewHook } from './usePreview';
import { create as createLoginHook } from './useLogin';
import { create as createLogoutHook } from './useLogout';
export function createHooks(useClient) {
    const useQuery = createQueryHook(useClient);
    const useMutation = createMutationHook(useClient);
    return {
        useQuery,
        useLazyQuery: createLazyQueryHook(useClient),
        useMutation,
        usePaginatedQuery: createPaginatedQueryHook(useClient),
        useSubscription: createSubscriptionHook(useClient),
        useTransactionQuery: createTransactionQueryHook(useClient),
        useHydrateCache: createHydrateCacheHook(useClient),
        useCategory: createCategoryHook(useQuery),
        usePosts: createPostsHook(useQuery),
        usePost: createPostHook(useQuery),
        usePage: createPageHook(useQuery),
    };
}
export function createAuthHooks(useClient) {
    const useQuery = createQueryHook(useClient);
    const useAuth = createAuthHook();
    const useMutation = createMutationHook(useClient);
    return {
        useQuery,
        useAuth,
        useLazyQuery: createLazyQueryHook(useClient),
        useMutation,
        usePaginatedQuery: createPaginatedQueryHook(useClient),
        useSubscription: createSubscriptionHook(useClient),
        useTransactionQuery: createTransactionQueryHook(useClient),
        useHydrateCache: createHydrateCacheHook(useClient),
        useCategory: createCategoryHook(useQuery),
        usePosts: createPostsHook(useQuery),
        usePost: createPostHook(useQuery),
        usePage: createPageHook(useQuery),
        usePreview: createPreviewHook(useAuth, useQuery),
        useLogin: createLoginHook(useMutation),
        useLogout: createLogoutHook(),
    };
}
